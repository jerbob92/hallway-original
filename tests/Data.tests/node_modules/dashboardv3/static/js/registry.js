var baseUrl = "http://registry.singly.com/-";

var registry = {};
var cache;
var apps_cache;

registry.getRegistry = function(callback) {
  $.getJSON(baseUrl + '/all', function(data, success) {
    if(!success) return callback(data, success);
    cache = data;
    callback(cache, success);
  });
};

registry.getAllApps = function(callback) {
  if(apps_cache) return callback(apps_cache, true);
  registry.getRegistry(function(data, success) {
    if(!success) return callback(data, success);
    var apps = {};
    for(var i in data) {
      var app = data[i];
      if(app.name && app.name.substring(0, 4) === 'app-' &&
         app.repository && app.repository.is === 'app' &&
         (app.repository.static == 'true' || app.repository.static == true)) {
        apps[i] = app;
      }
    }
    apps_cache = apps;
    callback(apps, success);
  });
}

registry.getApp = function(appName, callback) {
  if(apps_cache && apps_cache[appName]) return callback(apps_cache[appName]);
  registry.getAllApps(function(apps) {
    callback(apps[appName]);
  });
}

registry.getConnectors = function(callback) {
    connectors = [];
    registry.getRegistry(function(data, success) {
        if (success) {
            $.each(data, function(key, value) {
                if (value.type == "connector") {
                    connectors.push(value);
                }
            });
        }
        callback(connectors);
    });
};

registry.getByAuthor = function(author, callback) {
  registry.getAllApps(function(apps, success) {
    if(!success) return callback(apps, success);
    var authorsApps = {};
    for(var i in apps) {
      if(apps[i].author.name === author) authorsApps[i] = apps[i];
    }
    callback(authorsApps, success);
  });
}


registry.getByFilter = function(filters, callback) {
  registry.getAllApps(function(apps, success) {
    if(!success) return callback(apps, success);
    var filteredApps = {};
    for(var i in apps) {
      if(isMatch(apps[i].repository.uses, filters)) filteredApps[i] = apps[i];
    }
    callback(filteredApps, success);
  });
}

function isMatch(uses, filters) {
  console.error("DEBUG: uses", uses);
  if(!uses) return;
  if(uses.services && filters.services) {
    for(var j in uses.services) {
      for(var k in filters.services) {
        if(filters.services[k] === uses.services[j]) return true;
      }
    }
  }
  if(uses.types && filters.types) {
    for(var j in uses.types) {
      for(var k in filters.types) {
        if(filters.types[k] === uses.types[j]) return true;
      }
    }
  }
}
// 
// registry.getByFilter({services:{facebook:true}, types:{photos:true}}, function(filteredApps, success) {
//   console.error("DEBUG: filteredApps", filteredApps);
// });
