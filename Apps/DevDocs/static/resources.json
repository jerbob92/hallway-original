{
"apis":[
	{
		"path":"/Me/photos/state",
		"description":"State of the Photos collection",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"photosState",
				"summary":"Get the state of the Photos collection",
				"responseClass":"state"
			}
		]
	},
	{
		"path":"/Me/photos/since",
		"description":"Get the photos that have been added to the collection since a specific photo.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"photosSince",
				"summary":"Get the photo that have been added to the collection since a specific photo.",
				"responseClass":"photo",
				"parameters":[
					{
						"name":"id",
						"description":"The _id of the photo that was last seen.  Result array is all photos after this one.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/photos",
		"description":"Paginate through all collected photos.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"photosPaginate",
				"summary":"Paginate through all collected photos.",
				"responseClass":"photo",
				"parameters":[
					{
						"name":"limit",
						"description":"The maximum number of photos to return",
						"dataType":"number",
						"paramType":"query"
					},
					{
						"name":"skip",
						"description":"The number to offset into the photos collection and begin the returned data from.",
						"dataType":"number",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/photos/image/{id}",
		"description":"Redirect to the actual photo data based on the photo _id.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"photosRedirect",
				"summary":"Redirect to the actual photo data based on the photo _id.",
				"parameters":[
					{
						"name":"id",
						"description":"The _id from a photo to redirect to.",
						"dataType":"string",
						"paramType":"path"
					}
				]
			}
		]
	},
	{
		"path":"/Me/photos/id/{id}",
		"description":"Get the collected information about a single photo.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"photosGet",
				"summary":"Get the collected informat about a single photo.",
				"responseClass":"photo",
				"parameters":[
					{
						"name":"id",
						"description":"The _id from a photo to retrieve.",
						"dataType":"string",
						"paramType":"path"
					}
				]
			}
		]
	},


	{
		"path":"/Me/contacts/state",
		"description":"State of the Contacts collection",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"contactsState",
				"summary":"Get the state of the Contacts collection",
				"responseClass":"state"
			}
		]
	},
	{
		"path":"/Me/contacts/since",
		"description":"Get the contacts that have been added to the collection since a specific contact.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"contactsSince",
				"summary":"Get the contacts that have been added to the collection since a specific contact.",
				"responseClass":"contact",
				"parameters":[
					{
						"name":"id",
						"description":"The _id of the contact that was last seen.  Result array is all contacts after this one.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/contacts",
		"description":"Paginate through all collected contacts.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"contactsPaginate",
				"summary":"Paginate through all collected contacts.",
				"responseClass":"contact",
				"parameters":[
					{
						"name":"limit",
						"description":"The maximum number of contacts to return",
						"dataType":"number",
						"paramType":"query"
					},
					{
						"name":"skip",
						"description":"The number to offset into the contacts collection and begin the returned data from.",
						"dataType":"number",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/contacts/id/{id}",
		"description":"Get the collected information about a single contact.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"contactsGet",
				"summary":"Get the collected informat about a single contact.",
				"responseClass":"contact",
				"parameters":[
					{
						"name":"id",
						"description":"The _id from a contact to retrieve.",
						"dataType":"string",
						"paramType":"path"
					}
				]
			}
		]
	},
	{
		"path":"/Me/links/state",
		"description":"State of the Links collection",
		"operations":[
			{
				"httpMethod":"GET",
				"summary":"Get the state of the Links collection",
				"responseClass":"state"
			}
		]
	},
	{
		"path":"/Me/links/search",
		"description":"Search all links",
		"operations":[
			{
				"parameters":[
					{
						"name":"q",
						"description":"The search string",
						"dataType":"string",
						"paramType":"query"
					}
				],
				"httpMethod":"GET",
				"notes":"The query searches against the link, author, related contacts, title, and full page contents.  Most of the <a href='http://lucene.apache.org/java/2_3_2/queryparsersyntax.html'>Lucene query syntax</a> is available.",
				"nickname":"linksSearch",
				"summary":"Search all links",
				"responseClass":"link"
			}
		]
	},
	{
		"path":"/Me/links",
		"description":"Paginate through all collected links.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"linksPaginate",
				"summary":"Paginate through all collected links.",
				"responseClass":"link",
				"parameters":[
					{
						"name":"limit",
						"description":"The maximum number of links to return",
						"dataType":"number",
						"paramType":"query"
					},
					{
						"name":"offset",
						"description":"The number to offset into the links collection and begin the returned data from.",
						"dataType":"number",
						"paramType":"query"
					},
					{
						"name":"fields",
						"description":"Which subset of all the links fields to return.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/links/id/{id}",
		"description":"Get the link information for a specific link.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"linksGet",
				"summary":"Get the link information for a specific link.",
				"responseClass":"link",
				"parameters":[
					{
						"name":"id",
						"description":"The _id of the link object to return.",
						"dataType":"string",
						"paramType":"path"
					}
				]
			}
		]
	},
	{
		"path":"/Me/links/encounters/{id}",
		"description":"Get the information on where a link was originally seen.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"linksGetEncounters",
				"summary":"Get the link information for a specific link.",
				"responseClass":"link",
				"notes":"A single link can have many encounters.  Encounters are the information from other sources such as tweets or facebook wall posts.",
				"parameters":[
					{
						"name":"id",
						"description":"The url of the link.  This is the fully expanded link when possible.",
						"dataType":"string",
						"paramType":"query"
					},
					{
						"name":"limit",
						"description":"The maximum number of encounters to return.",
						"dataType":"number",
						"paramType":"query"
					},
					{
						"name":"sort",
						"description":"The order of the returned encounters.  Currently this uses a <a href='http://www.mongodb.org/display/DOCS/Sorting+and+Natural+Order'>MongoDB syntax</a>.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/Me/links/since",
		"description":"Get the links that have been added to the collection since a specific link.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"linksSince",
				"summary":"Get the links that have been added to the collection since a specific link.",
				"responseClass":"link",
				"parameters":[
					{
						"name":"id",
						"description":"The _id of the link that was last seen.  Result array is all links after this one.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},

	{
		"path":"/map",
		"description":"Retrieve information about the available and installed locker services",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"coreMap",
				"summary":"Retrieve information about the available and installed locker services",
				"responseClass":"serviceMap"
			}
		]
	},
	{
		"path":"/providers",
		"description":"Find services that provide the given types.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"coreProviders",
				"summary":"Find services that provide the given types.",
				"responseClass":"service",
				"parameters":[
					{
						"name":"types",
						"description":"A single, or comma separated list, of service types that are being searched for.",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/synclets/{syncletName}/getCurrent/{type}",
		"description":"Retrieve all of the current data from a synclet.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"coreAvailable",
				"summary":"Retrieve all of the current data from a synclet.",
				"responseClass":"service",
				"parameters":[
					{
						"name":"syncletName",
						"description":"The name of the synclet to retrieve data from.",
						"dataType":"string",
						"paramType":"path"
					},
					{
						"name":"type",
						"description":"The data type to retrieve from the gieven synclet.",
						"dataType":"string",
						"paramType":"path"
					}
				]
			}
		]
	},
	{
		"path":"/available",
		"description":"Retrieve the service information of an available service with the given handle.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"coreAvailable",
				"summary":"Retrieve the service information of an available service with the given handle.",
				"responseClass":"service",
				"parameters":[
					{
						"name":"handle",
						"description":"The handle of the avaiable service to retrieve",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	},
	{
		"path":"/query",
		"description":"Query collection data.",
		"operations":[
			{
				"httpMethod":"GET",
				"nickname":"coreQuery",
				"summary":"Query collection data.",
				"parameters":[
					{
						"name":"tbd",
						"description":"tbd",
						"dataType":"string",
						"paramType":"query"
					}
				]
			}
		]
	}
],
"models":[
	{
		"name":"state",
		"responseClass":{
			"id":"state",
			"properties":{
				"ready":{
					"type":"boolean",
					"description":"true when the collection is ready to be interacted with."
				},
				"count":{
					"type":"number",
					"description":"The count of all of the available items in the collection."
				},
				"updated":{
					"type":"long",
					"description":"The time, in milliseconds, that the collection was last updated."
				},
				"lastId":{
					"type":"string",
					"description":"The object id of the last stored entry in the collection.  This is useful in conjunction with the /since endpoint."
				}
			}
		}
	},
	{
		"name":"link",
		"responseClass":{
			"id":"link",
			"properties":{
				"_id":{
					"type":"string",
					"description":"A unique identifier for this link."
				},
				"link":{
					"type":"string",
					"description":"The actual url, usually in a complete expanded form."
				}
			}
		}
	},
	{
		"name":"photo",
		"responseClass":{
			"id":"photo",
			"properties":{
				"_id":{
					"type":"string",
					"description":"A unique identifier for this photo."
				}
			}
		}
	},
	{
		"name":"contact",
		"responseClass":{
			"id":"contact",
			"properties":{
				"_id":{
					"type":"string",
					"description":"A unique identifier for this contact."
				}
			}
		}
	},
	{
		"name":"serviceMap",
		"responseClass":{
			"id":"serviceMap",
			"properties":{
				"available":{
					"type":"string",
					"description":"An array of service manifest entries for all of the available locker services."
				}
			}
		}
	},
	{
		"name":"service",
		"responseClass":{
			"id":"service",
			"properties":{
				"available":{
					"type":"string",
					"description":"An array of service manifest entries for all of the available locker services."
				}
			}
		}
	}
],
"basePath":"http://localhost:8042",
"swaggerVersion":"1.0",
"apiVersion":"0.1"
}